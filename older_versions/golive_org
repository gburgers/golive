#!/bin/bash

set -e

PID_FILE=".goliveserver.pid"
export PID_FILE

log() {
    echo "[$(date '+%H:%M:%S')] $*"
}

cleanup() {

    if [ -f "$PID_FILE" ]; then
        pid=$(<"$PID_FILE")

        if ps -p "$pid" >/dev/null 2>&1; then
            if kill "$pid" 2>/dev/null; then
                log ">>> GoLive server gracefully stopped!"
                echo
            elif kill -9 "$pid" 2>/dev/null; then
                log ">>> GoLive server killed!"
            else
                log ">>> Failed to kill process $pid"
            fi

        else
            log ">>> PID exists but no matching GoLive server"
        fi

        rm -f "$PID_FILE"
        # log ">>> PID file removed"

    else
        log ">>> No PID file found"
    fi

    if pid_fallback=$(pgrep -f '^./goliveserver$'); then

        if [ -n "$pid_fallback" ]; then
            if kill "$pid_fallback" 2>/dev/null; then
                log ">>> GoLive server gracefully stopped!"
            elif kill -9 "$pid_fallback" 2>/dev/null; then
                log ">>> GoLive server killed!"
            else
                log ">>> Failed to kill GoLive server"
            fi
        else
            log ">>> No active GoLive server"
        fi
    fi
}

build_templ() {
    log "*** Building Temple files ***"
    if go tool templ generate -path .; then
        log ">>> Build Templ successfully"
    else
        log ">>> Templ build failed!"
        return 1
    fi

}

build_app() {

    main_path=$(fd main.go --type f --exclude vendor --exclude .git | head -n1)

    if [ -z "$main_path" ]; then
        log ">>> Could not find main.go"
        log ">>> There is no main.go! Waiting for changes..."
        return 1
    fi

    main_dir=$(dirname "$main_path")
    log ">>> Found main.go in $main_dir"
    log "*** Building Go app ***"

    # Build all .go files in that folder
    if go build -o ./goliveserver "$main_dir"/*.go; then
        log ">>> Build App successfully"
    else
        log ">>> Building App Failed.., please fix!"
        log "*** Waiting for changes... ***"
        return 1
    fi

    if [ -f goliveserver ]; then
        log "*** Starting GoLive server ***"
        ./goliveserver &
        server_pid=$!
    else
        log ">>> Cannot find Go build file"
        return 1
    fi

    if ps -p "$server_pid" >/dev/null 2>&1; then
        echo "$server_pid" >"$PID_FILE"
        # log ">>> Server runs on PID: $server_pid"
        log "*** Waiting for changes... ***"
    else
        log ">>> Failed to start GoLive server."
        exit 1
    fi

}

# Export functions to be available for 'entr'
export -f cleanup
export -f build_app
export -f build_templ
export -f log

# Trap Ctrl+C (SIGINT) and terminal close (SIGHUP) signals
trap cleanup INT TERM HUP

# Watch *.go and *.templ for changes and execute functions
entr -d bash -c 'cleanup && build_templ && build_app' <<<"$(fd -e go -e templ)"

wait
